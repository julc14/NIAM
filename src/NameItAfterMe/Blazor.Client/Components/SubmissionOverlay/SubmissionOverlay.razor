<MudOverlay @bind-Visible="@IsVisible" DarkBackground="true" >
    <CascadingValue Value="@Width" Name="Width" IsFixed="true">
        <CascadingValue Value="@Height" Name="Height" IsFixed="true">
            
            <MudTabs Outlined="true"
                     Position="@Position.Left"
                     Rounded="true"
                     Border="true"
                     ApplyEffectsToContainer="true"
                     Class="mt-8"
                     TabPanelClass="pa-3">
                <MudTabPanel Text="Exoplanet Details">

                    <ExoplanetDetails 
                            Elevation="5"
                            Exoplanet="@Exoplanet"
                            ImageSource="@PlanetImagePath" />

                </MudTabPanel>

                <MudTabPanel Text="Naming Schemes">
                    <NamingSchemes State="@_state" />
                </MudTabPanel>

                <MudTabPanel Text="Background">
                    <BackgroundCard State="@_state" />
                </MudTabPanel>

                <MudTabPanel Text="Review">
                    <ReviewCard State="@_state" OnExoplanetNamed="OnExoplanetNamedCore" />
                </MudTabPanel>

                <MudTabPanel 
                        Style="background-color:var(--mud-palette-primary-darken);color:var(--mud-palette-text-secondary);align-self:flex-end;margin-top:68%"
                        OnClick="() => IsVisible = false"
                        Text="Close" />

            </MudTabs>

        </CascadingValue>
    </CascadingValue>
</MudOverlay>

@code {
    //private string? _name;
    private bool _isVisible;
    private NameExoplanetOperationState _state;

    [Inject] 
    public required HttpClient HttpClient { get; set; }

    [Inject] 
    public required ISnackbar Snackbar { get; set; }

    [Parameter, EditorRequired] 
    public required string PlanetImagePath { get; set; }

    [Parameter, EditorRequired] 
    public required ExoplanetDto Exoplanet { get; set; }

    [Parameter] 
    public EventCallback<string> OnExoplanetNamed { get; set; }

    [Parameter] 
    public string Height { get; set; } = "350px";

    [Parameter] 
    public string Width { get; set; } = "500px";

    [Parameter] 
    public bool IsVisible 
    {
        get => _isVisible;
        set
        {
            if (_isVisible == value)
                return;

            _isVisible = value;

            IsVisibleChanged.InvokeAsync(_isVisible);
        }
    }

    [Parameter] 
    public EventCallback<bool> IsVisibleChanged { get; set; }

    protected override void OnInitialized()
    {
        _state = new()
        {
            ExoplanetName = Exoplanet.Name,
        };
    }

    private async Task OnExoplanetNamedCore(string name)
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        Snackbar.Add("Planet Named Succesfully!", Severity.Info, c => 
        {
            c.ActionColor = Color.Primary;
            c.SnackbarVariant = Variant.Filled;
        });

        await OnExoplanetNamed.InvokeAsync(name);
        IsVisible = false;
    }
}