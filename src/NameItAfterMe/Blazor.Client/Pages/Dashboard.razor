@page "/"

<PageTitle>Name It After Me!</PageTitle>

<MudContainer MaxWidth=MaxWidth.ExtraLarge>
    <MudPaper Style="background-color:var(--mud-palette-black)">

        <MudGrid Spacing="0">

            <MudItem xs="12">
                <MudCard Square="true" Style="margin:20px" Elevation="10">
                    <MudCardContent>
                        <MudText Typo=Typo.h3 Align=Align.Center>Name It After Me!</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="6">

                <MudCard Style="margin:20px" Elevation="10" Square="true">
                    @if (_exoplanetCount is not null)
                    {
                        <MudCardContent>

                            <MudGrid Spacing="0">
                                <MudItem xs="6">
                                    <MudText Align="Align.Center" Typo=Typo.h5>@_exoplanetCount.TotalExoplanets</MudText>
                                </MudItem>
                                <MudItem xs="6">
                                    <MudText Align="Align.Center" Typo=Typo.h5>@_exoplanetCount.NamedExoplanets</MudText>
                                </MudItem>
                                <MudItem xs="6">
                                    <MudText Align="Align.Center" Typo=Typo.body1>Total Exoplanets </MudText>
                                </MudItem>
                                <MudItem xs="6">
                                    <MudText Align="Align.Center" Typo=Typo.body1>Named Exoplanets </MudText>
                                </MudItem>
                            </MudGrid>


                        </MudCardContent>
                    }
                </MudCard>

                <MudCard Style="margin:20px; height:170px" Elevation="10" Square="true"> 
                    Todo
                </MudCard>

                @if (_exoplanets is not null)
                {
                    <MudCarousel TData=PlanetCard Style="height:440px;clip-path:initial" AutoCycle=@_carouselRotating >

                        @foreach (var planet in _exoplanets)
                        {
                            <MudCarouselItem Transition="Transition.Fade">
                                <PlanetCard Square="true"
                                    OnExoplanetNamed="OnExoplanetNamed"
                                    Style="margin-right:20px;margin-left:20px"
                                    Elevation="10"
                                    Exoplanet=@planet
                                    IsOverlayVisibleChanged="isVisible => SetCarouselRotating(!isVisible)" />

                            </MudCarouselItem>
                        }

                    </MudCarousel>
                }
                else
                {
                    <MudCard Style="margin:20px;margin-bottom:50px" Elevation="10" Square="true">
                        <MudSkeleton Height="490px" SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave" />
                    </MudCard>
                }
            </MudItem>

            <MudItem xs="6">
                @if (_imagePath is not null)
                {
                    <PictureOfTheDayCard 
                        ObjectFit="ObjectFit.Cover"
                        Source="@_imagePath"
                        Height="610"
                        Style="width:97%; margin-right:20px; margin-top:20px; margin-bottom:20px"
                        ImageStyle="width:100%;padding:10px;" />
                }
                else
                {
                    <PictureOfTheDayCardLoading />
                }
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>

@code
{
    private ExoplanetCountDto? _exoplanetCount;
    private bool _carouselRotating = true;
    private string? _imagePath;

    private IEnumerable<ExoplanetDto>? _exoplanets;

    [Inject] 
    public required HttpClient HttpClient { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _exoplanetCount = await HttpClient.GetFromJsonAsync(new GetExoplanetCount());

        _exoplanets = await HttpClient.GetFromJsonAsync(new GetUnnamedExoplanets()
        {
            PageSize = 6,
            PageNumber = Random.Shared.Next(1, 10),
        });

        StateHasChanged();

        // todo: cache to reduce server hits
        _imagePath = await HttpClient.GetFromJsonAsync(new GetPictureOfTheDaySourcePath());
    }

    private void SetCarouselRotating(bool shouldRotate) => _carouselRotating = shouldRotate;

    private async Task OnExoplanetNamed(string name)
    {
        _exoplanetCount = await HttpClient.GetFromJsonAsync(new GetExoplanetCount());
        _exoplanets = _exoplanets?.Where(x => !x.Name.Equals(name, StringComparison.OrdinalIgnoreCase))?.ToList();
        StateHasChanged();
    }
}