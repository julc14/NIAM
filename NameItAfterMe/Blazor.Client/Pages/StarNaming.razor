@page "/starnaming"

<div style="height:auto;overflow:scroll;" tabindex="-1">
    <InfiniteScrolling ItemsProvider=@GetExoplanets >
        <ItemTemplate Context="item">
            <MudContainer MaxWidth="MaxWidth.Small" Class="pa-2">
                <PlanetCard Name=@item.Name />
            </MudContainer>
        </ItemTemplate>
        <LoadingTemplate>
            <MudCard>
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="408.03px"/>
                <MudCardContent>
                    <MudSkeleton Width="30%" Height="42px;" />
                    <MudSkeleton Width="80%" />
                    <MudSkeleton Width="100%" />
                </MudCardContent>
                <MudCardActions>
                    <MudSkeleton Width="64px" Height="40px" Class="ml-2" />
                    <MudSkeleton Width="105px" Height="40px" Class="ml-3" />
                </MudCardActions>
            </MudCard>
        </LoadingTemplate>
        
    </InfiniteScrolling>  
</div>

@code {

    [Inject] HttpClient HttpClient { get; set; }

    private int _maxPlanetsPerPage = 15;
    private int _currentPage = 1;

    private bool _isQuerying = true;

    async Task<IEnumerable<ExoplanetDto>> GetExoplanets(InfiniteScrollingItemsProviderRequest request)
    {
        var exoplanetRoute = $"Exoplanet/{request.StartIndex}/4";
        var ignoreCase = new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true,
        };

        var exoplanetGet =
            await HttpClient.GetFromJsonAsync<IEnumerable<ExoplanetDto>>(exoplanetRoute, ignoreCase);

        return exoplanetGet ?? Enumerable.Empty<ExoplanetDto>();
    }
}